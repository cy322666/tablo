# https://bjornjohansen.no/redirect-to-https-with-nginx
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    location ^~ /.well-known/acme-challenge {
        alias /var/lib/certbot/.well-known/acme-challenge;
        default_type "text/plain";
        try_files $uri =404;
    }

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    server_name _;

    ################################################################################
    # ssl config (check with https://www.ssllabs.com/ssltest/)

    # serve this path, then user certbot like:
    #     certbot certonly \
    #             --text \
    #             --email resi@rissner.net \
    #             --webroot -w /var/lib/certbot/ \
    #             -d mydomain1.net - mydomain2.net ...
    #
    location ^~ /.well-known/acme-challenge {
        alias /var/lib/certbot/.well-known/acme-challenge;
        default_type "text/plain";
        try_files $uri =404;
    }

    # HSTS, nice ...
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # certbot places files in /etc/letsencrypt/live/mydomain.net/...
    # need to use some variables here ...
    # note: android chrome needs the full chain
    ssl_certificate /etc/letsencrypt/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/privkey.pem;
    # better ssl test?
    # https://blog.qualys.com/ssllabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy
    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #ssl_prefer_server_ciphers on;
    #ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

    root /var/www/html/public;
    index index.php;
    access_log /var/log/nginx/frontend-access.log combined;
    error_log  /var/log/nginx/frontend-error.log warn;


    location / {

        # Redirect everything that isn't a real file to index.php
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # deny accessing php files for the /assets directory
    location ~ ^/assets/.*\.php$ {
        deny all;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass php:9000;
        #fastcgi_pass unix:/var/run/php5-fpm.sock;
        try_files $uri =404;
        fastcgi_read_timeout 900;
    }

    location ~* /\. {
        deny all;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

